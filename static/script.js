document.addEventListener("DOMContentLoaded", () => {
  const historyDiv = document.getElementById("history");
  const questionInput = document.getElementById("question");
  const micBtn = document.getElementById("mic-button");
  const sendBtn = document.getElementById("send-button");

  // –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω —Å”©–π–ª–µ—É (speech-to-text)
  micBtn.addEventListener("click", () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert("üé§ –ë“±–ª –±—Ä–∞—É–∑–µ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–¥—ã “õ–æ–ª–¥–∞–º–∞–π–¥—ã.");
      return;
    }

    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = "kk-KZ";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.start();

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      questionInput.value = transcript;
      sendQuestion(); // –ê–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
    };

    recognition.onerror = (event) => {
      alert("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω –æ“õ—É —Å”ô—Ç—Å—ñ–∑: " + event.error);
    };
  });

  // Enter –∞—Ä“õ—ã–ª—ã —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
  questionInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendQuestion();
    }
  });

  // –ë–∞—Ç—ã—Ä–º–∞–º–µ–Ω —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
  sendBtn.addEventListener("click", sendQuestion);
});

// –°“±—Ä–∞“õ—Ç—ã —Å–µ—Ä–≤–µ—Ä–≥–µ –∂—ñ–±–µ—Ä—É
async function sendQuestion() {
  const questionInput = document.getElementById("question");
  const historyDiv = document.getElementById("history");
  const question = questionInput.value.trim();

  if (question === "") return;

  // –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã
  const userMessage = document.createElement("div");
  userMessage.className = "message user";
  userMessage.textContent = "üßë‚Äçüíª: " + question;
  historyDiv.appendChild(userMessage);
  questionInput.value = "";

  // ü§ñ –û–π–ª–∞–Ω—É–¥–∞...
  const thinkingMessage = document.createElement("div");
  thinkingMessage.className = "message bot thinking";
  thinkingMessage.textContent = "ü§ñ –û–π–ª–∞–Ω—É–¥–∞...";
  historyDiv.appendChild(thinkingMessage);
  historyDiv.scrollTop = historyDiv.scrollHeight;

  try {
    const response = await fetch("/ask", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ message: question })
    });

    const data = await response.json();

    thinkingMessage.textContent = "ü§ñ: " + data.response;
    thinkingMessage.classList.remove("thinking");
  } catch (error) {
    thinkingMessage.textContent = "‚ùå “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.";
    thinkingMessage.classList.add("error");
    console.error("Fetch error:", error);
  }

  // Scroll —Å–æ“£—ã–Ω–∞
  historyDiv.scrollTop = historyDiv.scrollHeight;
}






//—Ä–æ–ª—å
let currentRole = "default";

document.getElementById("role").addEventListener("change", function () {
  currentRole = this.value;
});

function getRolePrompt(role) {
  switch (role) {
    case "psychologist":
      return "–°–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥—Å—ã“£. –ú–∞“õ—Å–∞—Ç—ã“£ ‚Äì –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ “õ–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç—É.";
    case "teacher":
      return "–°–µ–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ –º–µ–Ω ”ô–¥–µ–±–∏–µ—Ç—ñ –ø”ô–Ω—ñ–Ω–µ–Ω “±—Å—Ç–∞–∑—Å—ã“£. “ö–∞—Ä–∞–ø–∞–π—ã–º, –Ω–∞“õ—Ç—ã –∂–∞—É–∞–ø –±–µ—Ä.";
    case "wise":
      return "–°–µ–Ω –¥–∞–Ω–∞ “õ–∞—Ä–∏—è—Å—ã“£, –µ—Å–∫—ñ “õ–∞–∑–∞“õ –Ω–∞“õ—ã–ª —Å”©–∑–¥–µ—Ä –º–µ–Ω –º—ã—Å–∞–ª–¥–∞—Ä –∞–π—Ç.";
    case "friend":
      return "–°–µ–Ω “õ–∞—Ä–∞–ø–∞–π—ã–º –¥–æ—Å—Å—ã“£. –ñ—ã–ª—ã, —Ç“Ø—Å—ñ–Ω—ñ—Å—Ç—ñ–∫–ø–µ–Ω —Å”©–π–ª–µ—Å.";
    default:
      return "";
  }
}

// modify prompt before sending to backend
async function sendMessage() {
  const messageInput = document.getElementById("message");
  const message = messageInput.value.trim();
  if (!message) return;

  appendMessage("user", message);
  messageInput.value = "";

  const rolePrompt = getRolePrompt(currentRole);
  const finalMessage = rolePrompt ? `${rolePrompt}\n\n${message}` : message;

  const response = await fetch("/get", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ msg: finalMessage }),
  });

  const data = await response.json();
  appendMessage("bot", data.response);
}
document.addEventListener("DOMContentLoaded", () => {
  const historyDiv = document.getElementById("history");
  const questionInput = document.getElementById("question");
  const micBtn = document.getElementById("mic-button");
  const sendBtn = document.getElementById("send-button");

  // –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω —Å”©–π–ª–µ—É (speech-to-text)
  // üöÄ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  navigator.mediaDevices.getUserMedia({ audio: true })
    .then((stream) => {
      console.log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä“±“õ—Å–∞—Ç—ã –±–µ—Ä—ñ–ª–¥—ñ.");
      stream.getTracks().forEach(track => track.stop());
    })
    .catch((err) => {
      console.warn("‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω“ì–∞ —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ–ª–º–µ–¥—ñ: ", err);
      alert("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω“ì–∞ —Ä“±“õ—Å–∞—Ç “õ–∞–∂–µ—Ç. –ë—Ä–∞—É–∑–µ—Ä–¥–µ–Ω —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ“£—ñ–∑.");
    });

  // üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
  let recognition;
  if ('webkitSpeechRecognition' in window) {
    recognition = new webkitSpeechRecognition();
    recognition.lang = 'kk-KZ'; // “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      questionInput.value = transcript;
    };

    recognition.onerror = (event) => {
      console.error("üé§ “ö–∞—Ç–µ:", event.error);
      alert("–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω –æ“õ—É —Å”ô—Ç—Å—ñ–∑. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.");
    };
  } else {
    micBtn.disabled = true;
    alert("–ë—Ä–∞—É–∑–µ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–¥—ã “õ–æ–ª–¥–∞–º–∞–π–¥—ã.");
  }

  micBtn.addEventListener("click", () => {
    if (recognition) {
      recognition.start();
    }
  });

  // Enter –∞—Ä“õ—ã–ª—ã —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
  questionInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendQuestion();
    }
  });

  // –ë–∞—Ç—ã—Ä–º–∞–º–µ–Ω —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
  sendBtn.addEventListener("click", sendQuestion);
});

// –°“±—Ä–∞“õ—Ç—ã —Å–µ—Ä–≤–µ—Ä–≥–µ –∂—ñ–±–µ—Ä—É
async function sendQuestion() {
  const questionInput = document.getElementById("question");
  const historyDiv = document.getElementById("history");
  const question = questionInput.value.trim();

  if (question === "") return;

  // –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã
  const userMessage = document.createElement("div");
  userMessage.className = "message user";
  userMessage.textContent = "üßë‚Äçüíª: " + question;
  historyDiv.appendChild(userMessage);
  questionInput.value = "";

  // ü§ñ –û–π–ª–∞–Ω—É–¥–∞...
  const thinkingMessage = document.createElement("div");
  thinkingMessage.className = "message bot thinking";
  thinkingMessage.textContent = "ü§ñ –û–π–ª–∞–Ω—É–¥–∞...";
  historyDiv.appendChild(thinkingMessage);
  historyDiv.scrollTop = historyDiv.scrollHeight;

  try {
    const response = await fetch("/ask", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ message: question })
    });

    const data = await response.json();

    thinkingMessage.textContent = "ü§ñ: " + data.response;
    thinkingMessage.classList.remove("thinking");
  } catch (error) {
    thinkingMessage.textContent = "‚ùå “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.";
    thinkingMessage.classList.add("error");
    console.error("Fetch error:", error);
  }

  // Scroll —Å–æ“£—ã–Ω–∞
  historyDiv.scrollTop = historyDiv.scrollHeight;
}


// modify prompt before sending to backend
async function sendMessage() {
  const messageInput = document.getElementById("message");
  const message = messageInput.value.trim();
  if (!message) return;

  appendMessage("user", message);
  messageInput.value = "";

  const rolePrompt = getRolePrompt(currentRole);
  const finalMessage = rolePrompt ? `${rolePrompt}\n\n${message}` : message;

  const response = await fetch("/get", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ msg: finalMessage }),
  });

  const data = await response.json();
  appendMessage("bot", data.response);
}
